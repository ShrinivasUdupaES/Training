Create table Movie(mID int primary key, title varchar(30), year int, director varchar(30));
Create table Reviewer(rID int primary key, name varchar(30)); 
Create table Rating (rID int, mID int, stars int, ratingDate date, foreign key(rID) references Reviewer(rID), foreign key(mID) references Movie(mID));


insert into movie values(101,'Gone with the Wind',1939,'Victor Fleming'),
(102,'Star Wars',1977,'George Lucas'),
(103,'The Sound of Music',1965,'George Lucas'),
(104,'E.T.',1982,'Robert Wise'),
(105,'Titanic',1997,'James Cameron'),
(106,'Snow White',1937,''),
(107,'Avatar',2009,'James Cameron'),
(108,'Raiders of the Lost Ark',1981,'Steven Spielberg');


insert into reviewer values(201,'Sarah Martinez'),
(202,'Daniel Lewis'),
(203,'Brittany Harris'),
(204,'Mike Anderson'),
(205,'Chirs Jackson'),
(206,'Elizabeth Thomas'),
(207,'James Cameron'),
(208,'Ashley White');


insert into rating values(201,101,2,date'2011-01-22'),
(201,101,4,date'2011-01-27'),
(202,106,4,NULL),
(203,103,2,date'2011-01-20'),
(203,108,4,date'2011-01-12'),
(203,108,2,date'2011-01-30'),
(204,101,3,date'2011-01-09'),
(205,103,3,date'2011-01-27'),
(205,104,2,date'2011-01-22'),
(205,108,4,NULL),
(206,107,3,date'2011-01-15'),
(206,106,5,date'2011-01-19'),
(207,107,5,date'2011-01-20'),
(208,104,3,date'2011-01-02');


mysql> select * from movie;
+-----+-------------------------+------+------------------+
| mID | title                   | year | director         |
+-----+-------------------------+------+------------------+
| 101 | Gone with the Wind      | 1939 | Victor Fleming   |
| 102 | Star Wars               | 1977 | George Lucas     |
| 103 | The Sound of Music      | 1965 | Robert Wise      |
| 104 | E.T.                    | 1982 | Steven Spielberg |
| 105 | Titanic                 | 1997 | James Cameron    |
| 106 | Snow White              | 1937 |                  |
| 107 | Avatar                  | 2009 | James Cameron    |
| 108 | Raiders of the Lost Ark | 1981 | Steven Spielberg |
+-----+-------------------------+------+------------------+

mysql> select * from reviewer;
+-----+------------------+
| rID | name             |
+-----+------------------+
| 201 | Sarah Martinez   |
| 202 | Daniel Lewis     |
| 203 | Brittany Harris  |
| 204 | Mike Anderson    |
| 205 | Chirs Jackson    |
| 206 | Elizabeth Thomas |
| 207 | James Cameron    |
| 208 | Ashley White     |
+-----+------------------+

mysql> select * from rating;
+------+------+-------+------------+
| rID  | mID  | stars | ratingDate |
+------+------+-------+------------+
|  201 |  101 |     2 | 2011-01-22 |
|  201 |  101 |     4 | 2011-01-27 |
|  202 |  106 |     4 | NULL       |
|  203 |  103 |     2 | 2011-01-20 |
|  203 |  108 |     4 | 2011-01-12 |
|  203 |  108 |     2 | 2011-01-30 |
|  204 |  101 |     3 | 2011-01-09 |
|  205 |  103 |     3 | 2011-01-27 |
|  205 |  104 |     2 | 2011-01-22 |
|  205 |  108 |     4 | NULL       |
|  206 |  107 |     3 | 2011-01-15 |
|  206 |  106 |     5 | 2011-01-19 |
|  207 |  107 |     5 | 2011-01-20 |
|  208 |  104 |     3 | 2011-01-02 |
+------+------+-------+------------+
---------------------------------------------------------------------------------------------------

1. Find the titles of all movies directed by Steven Spielberg. (1 point possible)

mysql> select title from movie where director="Steven Spielberg";
+-------------------------+
| title                   |
+-------------------------+
| E.T.                    |
| Raiders of the Lost Ark |
+-------------------------+
---------------------------------------------------------------------------------------------------

2. Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. 

mysql> select year, title from Movie where mID IN (select mID from Rating where stars IN (4,5)) order by year asc;
+------+-------------------------+
| year | title                   |
+------+-------------------------+
| 1937 | Snow White              |
| 1939 | Gone with the Wind      |
| 1981 | Raiders of the Lost Ark |
| 2009 | Avatar                  |
+------+-------------------------+

---------------------------------------------------------------------------------------------------

3. Find the titles of all movies that have no ratings. (1 point possible)

mysql> select title from Movie where mID NOT IN (select mID from Rating);
+-----------+
| title     |
+-----------+
| Star Wars |
| Titanic   |
+-----------+

---------------------------------------------------------------------------------------------------

4. Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have 
ratings with a NULL value for the date. (1 point possible)

mysql> select name from Reviewer where rID in (select rID from  Rating where ratingDate IS NULL);
+---------------+
| name          |
+---------------+
| Daniel Lewis  |
| Chirs Jackson |
+---------------+

---------------------------------------------------------------------------------------------------

5. Write a query to return the ratings data in a more readable format: reviewer name, movie title, 
stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly 
by number of stars. (1 point possible)

mysql> select Reviewer.name, Movie.title, Rating.stars, Rating.ratingDate
    -> from Rating join Reviewer on Rating.rId = Reviewer.rID join
    -> Movie on Movie.mID=Rating.mID order by Reviewer.name,Movie.title,Rating.stars;
+------------------+-------------------------+-------+------------+
| name             | title                   | stars | ratingDate |
+------------------+-------------------------+-------+------------+
| Ashley White     | E.T.                    |     3 | 2011-01-02 |
| Brittany Harris  | Raiders of the Lost Ark |     2 | 2011-01-30 |
| Brittany Harris  | Raiders of the Lost Ark |     4 | 2011-01-12 |
| Brittany Harris  | The Sound of Music      |     2 | 2011-01-20 |
| Chirs Jackson    | E.T.                    |     2 | 2011-01-22 |
| Chirs Jackson    | Raiders of the Lost Ark |     4 | NULL       |
| Chirs Jackson    | The Sound of Music      |     3 | 2011-01-27 |
| Daniel Lewis     | Snow White              |     4 | NULL       |
| Elizabeth Thomas | Avatar                  |     3 | 2011-01-15 |
| Elizabeth Thomas | Snow White              |     5 | 2011-01-19 |
| James Cameron    | Avatar                  |     5 | 2011-01-20 |
| Mike Anderson    | Gone with the Wind      |     3 | 2011-01-09 |
| Sarah Martinez   | Gone with the Wind      |     2 | 2011-01-22 |
| Sarah Martinez   | Gone with the Wind      |     4 | 2011-01-27 |
+------------------+-------------------------+-------+------------+
---------------------------------------------------------------------------------------------------

6. For all cases where the same reviewer rated the same movie twice and gave it a higher rating the 
second time, return the reviewer's name and the title of the movie. (1 point possible)

mysql> select r.name, m.title
    -> from rating r1 join rating r2
    -> on r1.rid = r2.rid
    -> and r1.mid = r2.mid
    -> join movie m
    -> on r1.mid = m.mid
    -> join reviewer r
    -> on r1.rid = r.rid
    -> where r1.stars > r2.stars
    -> and r1.mid = r2.mid
    -> and r1.ratingdate > r2.ratingdate;
+----------------+--------------------+
| name           | title              |
+----------------+--------------------+
| Sarah Martinez | Gone with the Wind |
+----------------+--------------------+
---------------------------------------------------------------------------------------------------

7. For each movie that has at least one rating, find the highest number of stars that movie received. 
Return the movie title and number of stars. Sort by movie title. (1 point possible)

mysql> select title, MAX(stars) from Rating join Movie
    -> on Movie.mID=Rating.mID
    -> group by Movie.title
    -> order by title;
+-------------------------+------------+
| title                   | MAX(stars) |
+-------------------------+------------+
| Avatar                  |          5 |
| E.T.                    |          3 |
| Gone with the Wind      |          4 |
| Raiders of the Lost Ark |          4 |
| Snow White              |          5 |
| The Sound of Music      |          3 |
+-------------------------+------------+
---------------------------------------------------------------------------------------------------

8. For each movie, return the title and the 'rating spread', that is, the difference between highest 
and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie 
title. (1 point possible)

mysql> select m.title, max(r.stars) - min(r.stars) as rating_spread
    -> from movie m, rating r
    -> where m.mID = r.mID
    -> group by m.title
    -> order by rating_spread desc, m.title;
+-------------------------+---------------+
| title                   | rating_spread |
+-------------------------+---------------+
| Avatar                  |             2 |
| Gone with the Wind      |             2 |
| Raiders of the Lost Ark |             2 |
| E.T.                    |             1 |
| Snow White              |             1 |
| The Sound of Music      |             1 |
+-------------------------+---------------+

---------------------------------------------------------------------------------------------------

9. Find the difference between the average rating of movies released before 1980 and the average 
rating of movies released after 1980. (Make sure to calculate the average rating for each movie, 
then the average of those averages for movies before 1980 and movies after. Don't just calculate 
the overall average rating before and after 1980.) (1 point possible)

mysql> select max(a1)-min(a1) from
    -> (select avg(av1) as a1 from
    -> (select avg(stars) as av1 from
    -> rating r join movie m
    -> on r.mid=m.mid
    -> where m.year < 1980
    -> group by r.mid) as aa1
    -> union
    -> select avg(av2) as a1 from
    -> (select avg(stars) as av2 from
    -> rating r join movie m
    -> on r.mid=m.mid
    -> where m.year > 1980
    -> group by r.mid) as aa2) as a;
+-----------------+
| max(a1)-min(a1) |
+-----------------+
|      0.05556666 |
+-----------------+

---------------------------------------------------------------------------------------------------

10. Find the names of all reviewers who rated Gone with the Wind. (1 point possible)

mysql> select name from reviewer
    -> where rid in
    -> (select rid from rating
    -> where mid in
    -> (select mid from movie
    -> where title="Gone with the Wind"));
+----------------+
| name           |
+----------------+
| Sarah Martinez |
| Mike Anderson  |
+----------------+
---------------------------------------------------------------------------------------------------

11. For any rating where the reviewer is the same as the director of the movie, return the reviewer 
name, movie title, and number of stars. (1 point possible)

mysql> select name, title, stars from
    -> movie m join rating r1
    -> on m.mid = r1.mid
    -> join reviewer r2
    -> on r1.rid = r2.rid
    -> where m.director=r2.name;
+---------------+--------+-------+
| name          | title  | stars |
+---------------+--------+-------+
| James Cameron | Avatar |     5 |
+---------------+--------+-------+
---------------------------------------------------------------------------------------------------

12. Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by 
the first name of the reviewer and first word in the title is fine; no need for special processing 
on last names or removing "The".) (1 point possible)

mysql> select name from
    -> (select name from Reviewer
    -> union
    -> select title as name from Movie)
    -> as t
    -> order by name;
+-------------------------+
| name                    |
+-------------------------+
| Ashley White            |
| Avatar                  |
| Brittany Harris         |
| Chirs Jackson           |
| Daniel Lewis            |
| E.T.                    |
| Elizabeth Thomas        |
| Gone with the Wind      |
| James Cameron           |
| Mike Anderson           |
| Raiders of the Lost Ark |
| Sarah Martinez          |
| Snow White              |
| Star Wars               |
| The Sound of Music      |
| Titanic                 |
+-------------------------+

---------------------------------------------------------------------------------------------------

13. Find the titles of all movies not reviewed by Chris Jackson. (1 point possible)

mysql> select title from movie
    -> where title not in
    -> (select m.title from movie m
    -> join rating r
    -> on m.mid = r.mid
    -> join reviewer r1
    -> on r.rid = r1.rid
    -> where r1.name = 'Chirs Jackson');
+--------------------+
| title              |
+--------------------+
| Gone with the Wind |
| Star Wars          |
| Titanic            |
| Snow White         |
| Avatar             |
+--------------------+

---------------------------------------------------------------------------------------------------

14. For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the 
names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each 
pair only once. For each pair, return the names in the pair in alphabetical order. (1 point possible)

mysql> select distinct name, mid
    -> from reviewer r
    -> join rating r1
    -> on r.rid = r1.rid
    -> order by mid, name;
+------------------+------+
| name             | mid  |
+------------------+------+
| Mike Anderson    |  101 |
| Sarah Martinez   |  101 |
| Brittany Harris  |  103 |
| Chirs Jackson    |  103 |
| Ashley White     |  104 |
| Chirs Jackson    |  104 |
| Daniel Lewis     |  106 |
| Elizabeth Thomas |  106 |
| Elizabeth Thomas |  107 |
| James Cameron    |  107 |
| Brittany Harris  |  108 |
| Chirs Jackson    |  108 |
+------------------+------+

---------------------------------------------------------------------------------------------------

15. For each rating that is the lowest (fewest stars) currently in the database, return the reviewer 
name, movie title, and number of stars. (1 point possible)

mysql> select re.name, m.title, r.stars
    -> from movie m join rating r
    -> on m.mid = r.mid
    -> join reviewer re
    -> on r.rid = re.rid
    -> where r.stars = (select min(stars) from rating)
    -> group by m.title;
+-----------------+-------------------------+-------+
| name            | title                   | stars |
+-----------------+-------------------------+-------+
| Sarah Martinez  | Gone with the Wind      |     2 |
| Brittany Harris | The Sound of Music      |     2 |
| Brittany Harris | Raiders of the Lost Ark |     2 |
| Chirs Jackson   | E.T.                    |     2 |
+-----------------+-------------------------+-------+

---------------------------------------------------------------------------------------------------

16. List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies 
have the same average rating, list them in alphabetical order. (1 point possible)

mysql> select title, avg(stars) as average_ratings from movie m
    -> join rating r
    -> on m.mid = r.mid
    -> group by r.mid
    -> order by average_ratings desc, title;
+-------------------------+-----------------+
| title                   | average_ratings |
+-------------------------+-----------------+
| Snow White              |          4.5000 |
| Avatar                  |          4.0000 |
| Raiders of the Lost Ark |          3.3333 |
| Gone with the Wind      |          3.0000 |
| E.T.                    |          2.5000 |
| The Sound of Music      |          2.5000 |
+-------------------------+-----------------+

---------------------------------------------------------------------------------------------------

17. Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, 
try writing the query without HAVING or without COUNT.) (1 point possible)

mysql> select name from reviewer r
    -> join rating r1
    -> on r.rid = r1.rid
    -> group by r1.rid
    -> having count(r1.rid) >= 3;

+-----------------+
| name            |
+-----------------+
| Brittany Harris |
| Chirs Jackson   |
+-----------------+
---------------------------------------------------------------------------------------------------

18. Some directors directed more than one movie. For all such directors, return the titles of all 
movies directed by them, along with the director name. Sort by director name, then movie title. 
(As an extra challenge, try writing the query both with and without COUNT.) (1 point possible)

mysql> select m.title, m.director from movie m
    -> join movie m1
    -> on m.director = m1.director
    -> group by m.mid
    -> having count(m.mid) > 1
    -> order by m.director, m.title;
+-------------------------+------------------+
| title                   | director         |
+-------------------------+------------------+
| Avatar                  | James Cameron    |
| Titanic                 | James Cameron    |
| E.T.                    | Steven Spielberg |
| Raiders of the Lost Ark | Steven Spielberg |
+-------------------------+------------------+
---------------------------------------------------------------------------------------------------

19. Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. 
(Hint: This query is more difficult to write in SQLite than other systems; you might think of it as 
finding the highest average rating and then choosing the movie(s) with that average rating.) 
(1 point possible)

mysql> select title, avg(stars) from movie
    -> m join rating r
    -> on m.mid = r.mid
    -> group by title having avg(stars) = (select max(rates)
    -> from (select avg(stars) as rates from rating group by mid) as a);
+------------+------------+
| title      | avg(stars) |
+------------+------------+
| Snow White |     4.5000 |
+------------+------------+
---------------------------------------------------------------------------------------------------

20. Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. 
(Hint: This query may be more difficult to write in SQLite than other systems; you might think of 
it as finding the lowest average rating and then choosing the movie(s) with that average rating.) 
(1 point possible)

mysql> select m.title, avg(r.stars) as strs from rating r
    -> join movie m on m.mid = r.mid group by r.mid
    -> having strs = (select min(s.stars) as stars from (select mid, avg(stars) as stars from rating
    -> group by mid) as s);
+--------------------+--------+
| title              | strs   |
+--------------------+--------+
| The Sound of Music | 2.5000 |
| E.T.               | 2.5000 |
+--------------------+--------+
---------------------------------------------------------------------------------------------------

21. For each director, return the director's name together with the title(s) of the movie(s) they 
directed that received the highest rating among all of their movies, and the value of that rating. 
Ignore movies whose director is NULL. (1 point possible)

mysql> select director, title, max(stars)
    -> from movie m, rating r
    -> where m.mid = r.mid and director is not null
    -> group by director
    -> order by stars desc;
+------------------+--------------------+------------+
| director         | title              | max(stars) |
+------------------+--------------------+------------+
| James Cameron    | Avatar             |          5 |
| Victor Fleming   | Gone with the Wind |          4 |
| Robert Wise      | The Sound of Music |          3 |
| Steven Spielberg | E.T.               |          4 |
+------------------+--------------------+------------+
---------------------------------------------------------------------------------------------------