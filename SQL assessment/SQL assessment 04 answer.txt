create table Highschooler(ID int, name varchar(30), grade int);
create table Friend(ID1 int, ID2 int);
create table Likes(ID1 int, ID2 int);

insert into Highschooler values (1510, 'Jordan', 9),
(1689, 'Gabriel', 9),
(1381, 'Tiffany', 9),
(1709, 'Cassandra', 9),
(1101, 'Haley', 10),
(1782, 'Andrew', 10),
(1468, 'Kris', 10),
(1641, 'Brittany', 10),
(1247, 'Alexis', 11),
(1316, 'Austin', 11),
(1911, 'Gabriel', 11),
(1501, 'Jessica', 11),
(1304, 'Jordan', 12),
(1025, 'John', 12),
(1934, 'Kyle', 12),
(1661, 'Logan', 12);

mysql> select * from highschooler;
+------+-----------+-------+
| ID   | name      | grade |
+------+-----------+-------+
| 1510 | Jordan    |     9 |
| 1689 | Gabriel   |     9 |
| 1381 | Tiffany   |     9 |
| 1709 | Cassandra |     9 |
| 1101 | Haley     |    10 |
| 1782 | Andrew    |    10 |
| 1468 | Kris      |    10 |
| 1641 | Brittany  |    10 |
| 1247 | Alexis    |    11 |
| 1316 | Austin    |    11 |
| 1911 | Gabriel   |    11 |
| 1501 | Jessica   |    11 |
| 1304 | Jordan    |    12 |
| 1025 | John      |    12 |
| 1934 | Kyle      |    12 |
| 1661 | Logan     |    12 |
+------+-----------+-------+

insert into Friend values (1510, 1381),
(1510, 1689),
(1689, 1709),
(1381, 1247),
(1709, 1247),
(1689, 1782),
(1782, 1468),
(1782, 1316),
(1782, 1304),
(1468, 1101),
(1468, 1641),
(1101, 1641),
(1247, 1911),
(1247, 1501),
(1911, 1501),
(1501, 1934),
(1316, 1934),
(1934, 1304),
(1304, 1661),
(1661, 1025);

mysql> select * from friend;
+------+------+
| ID1  | ID2  |
+------+------+
| 1510 | 1381 |
| 1510 | 1689 |
| 1689 | 1709 |
| 1381 | 1247 |
| 1709 | 1247 |
| 1689 | 1782 |
| 1782 | 1468 |
| 1782 | 1316 |
| 1782 | 1304 |
| 1468 | 1101 |
| 1468 | 1641 |
| 1101 | 1641 |
| 1247 | 1911 |
| 1247 | 1501 |
| 1911 | 1501 |
| 1501 | 1934 |
| 1316 | 1934 |
| 1934 | 1304 |
| 1304 | 1661 |
| 1661 | 1025 |
+------+------+

insert into Likes values(1689, 1709),
(1709, 1689),
(1782, 1709),
(1911, 1247),
(1247, 1468),
(1641, 1468),
(1316, 1304),
(1501, 1934),
(1934, 1501),
(1025, 1101); 

mysql> select * from likes;
+------+------+
| ID1  | ID2  |
+------+------+
| 1689 | 1709 |
| 1709 | 1689 |
| 1782 | 1709 |
| 1911 | 1247 |
| 1247 | 1468 |
| 1641 | 1468 |
| 1316 | 1304 |
| 1501 | 1934 |
| 1934 | 1501 |
| 1025 | 1101 |
+------+------+

---------------------------------------------------------------------------------------------------

1. Find the names of all students who are friends with someone named Gabriel. (1 point possible)

mysql> select name from highschooler
    -> where id in
    -> (select ID2 from friend
    -> where ID1 in
    -> (select id from
    -> highschooler
    -> where name='Gabriel'));
+-----------+
| name      |
+-----------+
| Jordan    |
| Cassandra |
| Andrew    |
| Alexis    |
| Jessica   |
+-----------+

---------------------------------------------------------------------------------------------------

2. For every student who likes someone 2 or more grades younger than themselves, return that student's 
name and grade, and the name and grade of the student they like. (1 point possible)

mysql> select h1.name, h1.grade, h2.name, h2.grade
    -> from highschooler h1
    -> join likes
    -> on likes.id1 = h1.id
    -> join highschooler h2
    -> on h2.id = likes.id2
    -> where (h1.grade - h2.grade) >= 2;
+------+-------+-------+-------+
| name | grade | name  | grade |
+------+-------+-------+-------+
| John |    12 | Haley |    10 |
+------+-------+-------+-------+

---------------------------------------------------------------------------------------------------

3. For every pair of students who both like each other, return the name and grade of both students. 
Include each pair only once, with the two names in alphabetical order. (1 point possible)

mysql> select h1.name, h1.grade, h2.name, h2.grade
    -> from highschooler h1, highschooler h2, likes l1
    -> where h1.id = l1.id1
    -> and h2.id = l1.id2
    -> and h1.id in
    -> (select a.id2 from likes a
    -> join likes b
    -> on a.id1 = b.id2
    -> and b.id1=a.id2);
+-----------+-------+-----------+-------+
| name      | grade | name      | grade |
+-----------+-------+-----------+-------+
| Cassandra |     9 | Gabriel   |     9 |
| Gabriel   |     9 | Cassandra |     9 |
| Kyle      |    12 | Jessica   |    11 |
| Jessica   |    11 | Kyle      |    12 |
+-----------+-------+-----------+-------+

---------------------------------------------------------------------------------------------------

4. Find all students who do not appear in the Likes table (as a student who likes or is liked) and 
return their names and grades. Sort by grade, then by name within each grade. (1 point possible)

mysql> select name, grade
    -> from highschooler
    -> where ID not in
    -> (select distinct ID1 from likes)
    -> and id not in
    -> (select distinct ID2 from likes)
    -> order by 2, 1;
+---------+-------+
| name    | grade |
+---------+-------+
| Jordan  |     9 |
| Tiffany |     9 |
| Logan   |    12 |
+---------+-------+

---------------------------------------------------------------------------------------------------

5. For every situation where student A likes student B, but we have no information about whom B 
likes (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades.

mysql> select name, grade
    -> from highschooler
    -> where id in
    -> (select id2 from likes
    -> where id2 not in
    -> (select id1 from likes));
+--------+-------+
| name   | grade |
+--------+-------+
| Haley  |    10 |
| Kris   |    10 |
| Jordan |    12 |
+--------+-------+

---------------------------------------------------------------------------------------------------

6. Find names and grades of students who only have friends in the same grade. Return the result 
sorted by grade, then by name within each grade. (1 point possible)

mysql> select distinct h1.name, h1.grade
    -> from highschooler h1, highschooler h2, friend f1
    -> where h1.id = f1.id1
    -> and h2.id = f1.id2
    -> and h1.grade = h2.grade
    -> order by grade, name;
+-----------+-------+
| name      | grade |
+-----------+-------+
| Cassandra |     9 |
| Gabriel   |     9 |
| Jordan    |     9 |
| Tiffany   |     9 |
| Andrew    |    10 |
| Brittany  |    10 |
| Haley     |    10 |
| Kris      |    10 |
| Alexis    |    11 |
| Gabriel   |    11 |
| Jessica   |    11 |
| John      |    12 |
| Jordan    |    12 |
| Kyle      |    12 |
| Logan     |    12 |
+-----------+-------+

---------------------------------------------------------------------------------------------------

7. For each student A who likes a student B where the two are not friends, find if they have a 
friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, 
and C. (1 point possible)

mysql> select h1.name, h1.grade, h2.name, h2.grade, h3.name, h3.grade
    -> from highschooler h1, Likes, highschooler h2,
    -> highschooler h3, Friend F1, Friend F2
    -> where h1.id = Likes.id1
    -> and Likes.id2 = h2.id
    -> and h2.id not in
    -> (select id2 from Friend where ID1 = h1.id)
    -> and h1.id = F1.id1
    -> and F1.id2 = h3.id
    -> and h3.id = F2.id1
    -> and F2.id2 = h2.id;
+--------+-------+-----------+-------+---------+-------+
| name   | grade | name      | grade | name    | grade |
+--------+-------+-----------+-------+---------+-------+
| Andrew |    10 | Cassandra |     9 | Gabriel |     9 |
| Austin |    11 | Jordan    |    12 | Andrew  |    10 |
| Austin |    11 | Jordan    |    12 | Kyle    |    12 |
+--------+-------+-----------+-------+---------+-------+

---------------------------------------------------------------------------------------------------

8. Find the difference between the number of students in the school and the number of different 
first names. (1 point possible)

mysql> select count(*)-count(distinct name) as difference from highschooler;
+------------+
| difference |
+------------+
|          2 |
+------------+
---------------------------------------------------------------------------------------------------

9. Find the name and grade of all students who are liked by more than one other student.

mysql> select name, grade from highschooler
    -> where id in
    -> (select id2 from likes
    -> group by id2
    -> having count(id1) > 1);
+-----------+-------+
| name      | grade |
+-----------+-------+
| Cassandra |     9 |
| Kris      |    10 |
+-----------+-------+

---------------------------------------------------------------------------------------------------

10. For every situation where student A likes student B, but student B likes a different student C, 
return the names and grades of A, B, and C. (1 point possible)

mysql> select h1.name, h1.grade, h2.name, h2.grade, h3.name, h3.grade
    -> from highschooler h1, highschooler h2,
    -> highschooler h3, likes l1, likes l2
    -> where h1.id = l1.id1
    -> and h2.id = l1.id2
    -> and (h2.id = l2.id1 and h3.id = l2.id2 and h3.id <> h1.id);
+---------+-------+-----------+-------+---------+-------+
| name    | grade | name      | grade | name    | grade |
+---------+-------+-----------+-------+---------+-------+
| Andrew  |    10 | Cassandra |     9 | Gabriel |     9 |
| Gabriel |    11 | Alexis    |    11 | Kris    |    10 |
+---------+-------+-----------+-------+---------+-------+

---------------------------------------------------------------------------------------------------

11. Find those students for whom all of their friends are in different grades from themselves. 
Return the students' names and grades.(1 point possible)

mysql> select name, grade from highschooler h1
    -> where grade not in
    -> (select h2.grade from friend, highschooler h2
    -> where h1.id = friend.id1 and h2.id = friend.id2 );
+--------+-------+
| name   | grade |
+--------+-------+
| Austin |    11 |
+--------+-------+

---------------------------------------------------------------------------------------------------

12. What is the average number of friends per student? (Your result should be just one number.)

mysql> select avg(c) from (select count(id1) c from friend group by id2) a;
+--------+
| avg(c) |
+--------+
| 2.5000 |
+--------+

---------------------------------------------------------------------------------------------------

13. Find the number of students who are either friends with Cassandra or are friends of friends of 
Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. 

mysql> select count(*) from friend
    -> where id1 in
    -> (select id2 from friend
    -> where id1 in
    -> (select id from highschooler
    -> where name='Cassandra'));
+----------+
| count(*) |
+----------+
|        7 |
+----------+
---------------------------------------------------------------------------------------------------

14. Find the name and grade of the student(s) with the greatest number of friends.

mysql> select max(c) from (select count(id1) c from friend group by id2) a;
+--------+
| max(c) |
+--------+
|      4 |
+--------+
---------------------------------------------------------------------------------------------------
